.. _settings_cfg:

###########################
settings.cfg
###########################

In this chapter, we will go through all the settings available in CloudWhip and ways to use these settings for various configurations as per your lab environment requirements.

*********************
Structure and Format
*********************

The configuration file **settings.cfg** is structured into three main sections:

- Account Section 
- VPC Section
- POD Section 

`YAML <http://www.yaml.org/>`_ - ``(YAML Ain't Markup Language)`` is used as data serialization standard in the configuration file. In our case, we make use of `pyyaml <http://pyyaml.org/>`_ which is a python binding for YAML. This library should be installed when you run the ``setup.py install`` command while setting up the CloudWhip project on your local machine.  

Basically the layout for ``pyymal`` is similar to python language with indentation ``(Tab)`` representing the nested layers, semicolon ``(:)`` are used to separate variable name(Key) and value pairs, and hyphen ``(-)`` is used for nesting block mapping. 

If you need detailed information for pyymal format with examples, please visit there `official documentation <http://pyyaml.org/wiki/PyYAMLDocumentation>`_ page. 

*********************
Account Section
*********************

Account section gives general information about your AWS account for CloudWhip to use the Boto API calls internally.

connect_to_region
####################

This field tells CloudWhip where to deploy your lab environment. AWS offers you several `regions <http://docs.aws.amazon.com/general/latest/gr/rande.html>`_ to deploy your instances, you can choose them close to your Geolocation or as per your requirements. For example, your field value will be ``us-east-1`` if like your lab to be deployed in US East (Northern Virginia) Region.

.. warning::
	
	All the AWS regions are isolated, which means you can not create a resource such as a security group in one region and try to access it from an other region.


aws_access_key_id
########################

This field is for your AWS Access Key. Your key will look something like this ``AKIAIOSFODNN7EXAMPLE``.


aws_secret_access_key
########################

This is your AWS Secret Key. If you prefer to use IAM access keys instead of AWS root account access keys for security purposes, please follow instructions from AWS `Getting Started Guide <http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSGettingStartedGuide/AWSCredentials.html>`_

.. note::
	
	All the above fields are required for CloudWhip to work.

*********************
VPC Section
*********************

This section contains all the information to create or delete your VPC, subnet and security groups.

.. _vpc_name_sec:

name
#########

The name field in most of the sections is used for the creating name tags  and to later referred to associate other components. For example, if you decide to name your VPC as ``vpc_test`` as in the template, you can refer to this name tag in ``associate_vpc`` field from the :ref:`security_groups_sec` section.

cidr_block
############

This required field is for your VPC cidr block.

subnet_settings
#################

This section contains information about your subnets within the VPC you just created.

.. _subnet_group_name_sec:

subnet_group_name
********************

This field takes a string value for your subnet group ``Name`` tag.

count
***********

Mention the number (integer value) of subnets you want to create withing VPC you created.

subnet_cidr_block 
******************

This field specifies the cidr block for your subnet. You can create multiple subnets in single request within the VPC by using a range of valid cidr blocks as shown in ``settings.cfg.template1``. 

.. note::

	Your subnet ``count`` and ``subnet_cidr_block`` range if any should always match. For example, if you specify the subnet count value as 10 and your VPC cidr block is 192.168.1.1/20, then your ``subnet_cidr_block`` value can be 192.168.1-10.1/24, 192.168.5-15.1/24 etc., but CloudWhip will issue an error if it is something like 192.168.1-5.1/24 since the range is only 5 but the count was set to 10.

route_table
****************

This field specifies the route table rules associated with the subnet. For more details about route tables in AWS, please go through AWS User Guide on `Route Tables <http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html>`_. ``route_table`` field value is a list of python dictionary with ``Destination`` and ``Target`` as its keys. The values for both the Keys will be list of route paths. 

If you want to give Internet access to the subnet in your VPC then the Destination route would be 0.0.0.0/0, which means world and you live the corresponding ``Target`` entry as blank, since by default CloudWhip considers a blank Target entry as the internet gateway associated with the VPC. This is illustrated in template1. 

.. note::

	The route_table entries are in pairs. In other words the first entry in Destination list and the first entry in the ``Target`` list corresponds to one row in the actual route table. 

	So if you want a route table as illustrated below:

	+--------+-------------------+------------------+
	| Serial | Destination       | Target           |
	+========+===================+==================+
	| 1      | 0.0.0.0/0         | 10.2.10.1/24     |
	+--------+-------------------+------------------+
	| 2      | 10.1.10.1/24      | internet-gateway |
	+--------+-------------------+------------------+
	| 3      | 10.3.10.1/24      | 10.2.10.1/24     |
	+--------+-------------------+------------------+

	Your route_table entry would be ``{Destination: [0.0.0.0/0, 10.1.10.1/24, 10.3.10.1/24], Target: [10.2.10.1/24, , 10.2.10.1/24]}``
	
	Notice how the second Target entry is left blank for VPCs internet-gateway.

.. _security_groups_sec:

security_groups
###################

This section contains information about your security groups that you want to associate with your VPC. Please visit AWS User Guide on `Security Group <http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html>`_ for more details on Amazon EC2 Security Groups.

sg_name
****************
This field takes a string value for your security group ``Name`` tag.

description
****************
A description for your security group.

associate_vpc
****************
Mention VPC's :ref:`vpc_name_sec` value here to associate your security group with that particular VPC.

rules
****************
This is a nested python list of security group rules. A single rule structure is as follows::

	rules = [["ip_protocol", "from_port", "to_port", "cidr_ip", "sg_grp_name"]]

Here ``sg_grp_name`` refers to an existing security group name.

.. Warning::

	You can not use ``cidr_ip`` or ``sg_grp_name`` field together as in **settings.cfg.template1**, where the ``sg_grp_name`` is set to pyyaml null. If you want to use ``sg_grp_name``, then please set ``cidr_ip`` to pyyaml null. 

.. note::

	Please notice that the **settings.cfg** file follows `PyYaml TagScheme <http://pyyaml.org/wiki/PythonTagScheme>`_. That is ``Null`` is defined as ``!!null ''`` and boolean vaule as ``!!bool 'True'`` or ``!!bool 'False'``.

*********************
POD Section
*********************

This section contains all the information to create or delete your PODs.

name
#################
This field takes a string value for your POD group ``Name`` tag. This is also used as a base to create ``Name`` tags of your instances in the POD.

count 
#################
This is the count of PODs in each subnet that is associated. For example, if the associated subnet group contains 10 subnets and the POD count is 4, then CloudWhip creates 40 PODs in total, 4 in each subnet.  

associate_subnet_group_name
##############################
Defines the :ref:`subnet_group_name_sec` to be associated with this POD.

instance_settings
##################
This subsection contains all the information of your instances that belongs to this POD.

inst_name
****************
This field takes a string value for your instance ``Name`` tag. Your launched instance will have its ``Name`` tag as::
	
	{subnet_name_tag}:{pod_name}:{inst_name}:{count}

ami_id
****************
This defines the ID of your desired Amazon Machine Image (AMI). Here is a list of `Amazon Linux AMI IDs <http://aws.amazon.com/amazon-linux-ami/>`_. You can either create your own AMIs, use an existing shared image or use a Paid AMI. Please refer to AWS User Guide on `AMIs <http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html>`_ for more details.

associate_sg
****************
Specify the security group name to be associated with the instance. For example in **settings.cfg.template1** we specify ``grant_ssh_access`` to give ssh access to the instance for the ssh key pair name (:ref:`ssh_key_name_sec`) defined.

public_ip 
****************
Takes boolean value to define whether the instance should be associated with a Public IP to be reached from Internet. 

private_ip
****************
This defines the private IP address for the instance. This field accepts wild mask bits as shown in **settings.cfg.template1**. 

For example you have a subnet 10.0.1.0/24 and if you want a particular AMI (say Linux) to always have a private IP address ending with ``1`` (last octet), such as 10.0.1.1, 10.0.1.11, 10.0.1.21, etc., then your ``private_ip`` will be ``x.x.x.$1``. If you now want another AMI (Windows) to always start with ``2`` in the same subnet your ``private_ip`` will be ``x.x.x.2$``, hence your Windows instances will have private IPs such as 10.0.1.20, 10.0.1.21, 10.0.1.22, etc.,

If you do not wish to use the mask bits and let CloudWhip assign the next available subnet IP, then your ``private_ip`` field will be ``x.x.x.x``, as shown for ``dmz`` POD in the template file. 

.. _ssh_key_name_sec:

key_name
****************
Specify an existing SSH Key Pair Name associated with your AWS account to give SSH access to the instance. Refer to `Amazon EC2 Key Pairs <http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html>`_ for more details.

**********************
Examples
**********************

Many PODs in one subnet
########################

To create a Lab environment with many PODs in one subnet as shown in figure below, please refer to **settings.cfg.template1**

.. figure:: _static/arch1.png
    :width: 600px
    :align: center
    :height: 700px
    :alt: alternate text
    :figclass: align-center

    Many PODs in One Subnet

One POD per Subnet
##################

To create a Lab environment with one POD per subnet as shown in figure below, please refer to **settings.cfg.template2**

.. figure:: _static/arch2.png
    :width: 600px
    :align: center
    :height: 600px
    :alt: alternate text
    :figclass: align-center

    One POD per Subnet